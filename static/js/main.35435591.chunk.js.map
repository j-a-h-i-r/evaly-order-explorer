{"version":3,"sources":["components/OrderTimeline.tsx","components/api.ts","components/OrderStatusChart.tsx","components/Badge.tsx","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["options","plotOptions","bar","horizontal","distributed","dataLabels","hideOverflowingLabels","position","enabled","offsetX","textAnchor","formatter","val","opts","a","dayjs","diff","background","dropShadow","opacity","foreColor","borderColor","padding","style","colors","xaxis","type","grid","row","OrderTimelineChart","orderDeliveryDates","series","data","map","order","x","invoice_no","y","orderDate","deliveryDate","console","log","PROXY","orderApiUrl","orderDetailApiUrl","fetchPageOfOrder","token","fetch","headers","Authorization","response","json","fetchAllOrders","pageNum","url","orderResponse","orders","results","next","exec","then","nextOrders","concat","catch","fetchOneOrderHistory","orderNumber","orderNumbers","Promise","all","orderDetailResponses","history","resp","OrderStatusChart","status","statusCountMap","forEach","order_status","Object","entries","prepareOrderStatusSeries","height","Badge","header","content","className","Home","useState","setToken","setOrders","orderDetails","setOrderDetails","orderDeliveryData","setOrderDeliveryData","stats","setStats","useEffect","fetchAllOrderDetail","filter","histories","find","o","date","valueOf","deliveryData","timeInDays","sort","b","deliver","daysSorted","average","reduce","acc","cur","length","minimum","maximum","Math","round","calculateStatistics","placeholder","value","onChange","e","target","onClick","err","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35435591.chunk.js","sourcesContent":["import { ApexOptions } from 'apexcharts';\r\nimport dayjs from 'dayjs';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport { OrderDeliveryDate } from './interface';\r\n\r\nfunction prepareSeries(orderDates: OrderDeliveryDate[]) {\r\n  const series = orderDates.map((order) => {\r\n      return {\r\n          x: order.invoice_no,\r\n          y: [\r\n            order.orderDate,\r\n            order.deliveryDate,\r\n          ],\r\n      }\r\n  })\r\n  return [{\r\n      data: series,\r\n  }]\r\n}\r\n\r\n\r\nconst options: ApexOptions = {\r\n  plotOptions: {\r\n    bar: {\r\n      horizontal: true,\r\n      distributed: true,\r\n      dataLabels: {\r\n        hideOverflowingLabels: false,\r\n        position: 'top',\r\n      },\r\n    }\r\n  },\r\n  dataLabels: {\r\n    enabled: true,\r\n    offsetX: 60,\r\n    textAnchor: 'start',\r\n    formatter: function(val: any, opts: any) {\r\n      var a = dayjs(val[0])\r\n      var b = dayjs(val[1])\r\n      var diff = b.diff(a, 'd')\r\n      return diff + (diff > 1 ? ' days' : ' day')\r\n    },\r\n    background: {\r\n      dropShadow: {\r\n        enabled: false,\r\n      },\r\n      opacity: 1,\r\n      enabled: true,\r\n      foreColor: '#fd5f77',\r\n      borderColor: '#ff7dff',\r\n      padding: 6,\r\n    },\r\n    style: {\r\n      colors: ['#f3f4f5', '#fff'],\r\n    }\r\n  },\r\n  xaxis: {\r\n    type: 'datetime'\r\n  },\r\n  grid: {\r\n    row: {\r\n      colors: ['#f3f4f5', '#fff'],\r\n      opacity: 1\r\n    }\r\n  }\r\n}\r\n\r\nexport function OrderTimelineChart({orderDeliveryDates}: {orderDeliveryDates: OrderDeliveryDate[]}) {\r\n  const series = prepareSeries(orderDeliveryDates);\r\n\r\n  console.log(\"Series\", series);\r\n  \r\n  return (\r\n    <ReactApexChart series={series} options={options} type=\"rangeBar\">\r\n    </ReactApexChart>\r\n  )\r\n}","import { Order, OrderApiResponse, OrderDetail, OrderDetailApiResponse } from \"./interface\";\r\n\r\nconst PROXY = 'https://card-cors.herokuapp.com/';\r\nconst orderApiUrl = 'https://api.evaly.com.bd/core/custom/orders/';\r\nconst orderDetailApiUrl = 'https://api.evaly.com.bd/core/orders/histories/';\r\n\r\n\r\nexport async function fetchPageOfOrder(token: string, orderApiUrl: string): Promise<OrderApiResponse> {\r\n  const response = await fetch(PROXY + orderApiUrl, {\r\n    headers: {\r\n      Authorization: 'Bearer ' + token,\r\n    }\r\n  })\r\n  return response.json() as Promise<OrderApiResponse>;\r\n}\r\n\r\nexport async function fetchAllOrders(token: string, pageNum: string = '1'): Promise<Order[]> {\r\n  console.log('pageNum', pageNum);\r\n  const url = orderApiUrl + `?page=${pageNum}`;\r\n  console.log('url', url);\r\n\r\n  const orderResponse = await fetchPageOfOrder(token, url);\r\n  const orders: Order[] = orderResponse.results;\r\n\r\n  console.log('response', orderResponse);\r\n\r\n  if (orderResponse.next) {\r\n    const pageNum = /page=(\\d+)/.exec(orderResponse.next)?.[1];\r\n    if (pageNum) {\r\n      return fetchAllOrders(token, pageNum)\r\n      .then((nextOrders) => orders.concat(nextOrders))\r\n      .catch(() => orders);\r\n    } else {\r\n      return orders;\r\n    }\r\n  } else {\r\n    return orders;\r\n  }\r\n}\r\n\r\nexport async function fetchOneOrderHistory(token: string, orderNumber: string): Promise<OrderDetailApiResponse> {\r\n  const url = orderDetailApiUrl + orderNumber + '/';\r\n  const response = await fetch(PROXY + url, {\r\n    headers: {\r\n      Authorization: 'Bearer ' + token,\r\n    }\r\n  })\r\n  return response.json() as Promise<OrderDetailApiResponse>;\r\n}\r\n\r\nexport async function fetchAllOrderDetail(token: string, orders: Order[]): Promise<OrderDetail[]> {\r\n  const orderNumbers = orders.map((order) => order.invoice_no);\r\n\r\n  const orderDetailResponses = await Promise.all(\r\n    orderNumbers.map((orderNumber) => fetchOneOrderHistory(token, orderNumber))\r\n  )\r\n\r\n  const history = orderDetailResponses.map((resp) => resp.data);\r\n  return history;\r\n}","import { ApexOptions } from \"apexcharts\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { Order } from \"./interface\";\r\n\r\n\r\nfunction prepareOrderStatusSeries(orders: Order[]) {\r\n  const statusCountMap: { [key: string]: number } = {}\r\n  orders.forEach((order) => {\r\n    const { order_status: status } = order;\r\n    if (statusCountMap[status]) {\r\n      statusCountMap[status] += 1;\r\n    } else {\r\n      statusCountMap[status] = 1;\r\n    }\r\n  })\r\n\r\n  const statusCounts = Object.entries(statusCountMap).map(([status, count]) => {\r\n    return {\r\n      x: status,\r\n      y: count,\r\n    }\r\n  })\r\n  return [{\r\n    data: statusCounts,\r\n  }]\r\n}\r\n\r\nconst options: ApexOptions = {\r\n  plotOptions: {\r\n    bar: {\r\n      distributed: true,\r\n    }\r\n  },\r\n  grid: {\r\n    row: {\r\n      colors: ['#f3f4f5', '#fff'],\r\n      opacity: 1\r\n    }\r\n  }\r\n}\r\n\r\nexport function OrderStatusChart({orders}: {orders: Order[]}) {\r\n  const status = prepareOrderStatusSeries(orders);\r\n\r\n  return (\r\n    <ReactApexChart series={status} options={options} type=\"bar\" height={300}>\r\n    </ReactApexChart>\r\n  )\r\n}\r\n\r\n","export function Badge({header, content}: {header: string, content: any}) {\r\n  return (\r\n    <p className=\"bg-indigo-200 font-medium px-3 py-1 rounded-full\">\r\n      {header}\r\n        <span className=\"bg-pink-400 font-bold ml-2 px-3 rounded-full text-white\">\r\n          {content}\r\n        </span>\r\n    </p>\r\n  )\r\n}","import { useEffect, useState } from \"react\";\r\nimport dayjs from 'dayjs';\r\nimport { OrderTimelineChart } from \"./OrderTimeline\";\r\nimport { Order, OrderDeliveryDate, OrderDetail } from \"./interface\";\r\nimport { ORDER_DATA, ORDER_DETAIL_DATA } from './data';\r\nimport { fetchAllOrderDetail, fetchAllOrders } from \"./api\";\r\nimport { OrderStatusChart } from \"./OrderStatusChart\";\r\nimport { Badge } from \"./Badge\";\r\nimport { PendingOrders } from \"./PendingOrders\";\r\n\r\nfunction prepareOrderDeliveryData(orderDetail: OrderDetail[]): OrderDeliveryDate[] {\r\n  const onlyDelivered = orderDetail.filter((order) => order.order_status === 'delivered');\r\n  const deliveryData = onlyDelivered.map((order): OrderDeliveryDate => {\r\n    const { invoice_no, histories } = order;\r\n    const orderDate = histories.find((o) => o.order_status === 'pending')?.date;\r\n    const deliveryDate = histories.find((o) => o.order_status === 'delivered')?.date;\r\n\r\n    return {\r\n      invoice_no,\r\n      orderDate: dayjs(orderDate).valueOf(),\r\n      deliveryDate: dayjs(deliveryDate).valueOf()\r\n    }\r\n  })\r\n  return deliveryData;\r\n}\r\n\r\nfunction calculateStatistics(deliveryData: OrderDeliveryDate[]) {\r\n  function cmp(a: OrderDeliveryDate, b: OrderDeliveryDate): number {\r\n    return a.orderDate - b.orderDate;\r\n  }\r\n\r\n  const sorted = [...deliveryData].sort(cmp);\r\n  const timeInDays = sorted.map((data) => {\r\n    const {orderDate: order, deliveryDate: deliver} = data;\r\n    return dayjs(deliver).diff(order, 'd');\r\n  })\r\n  const daysSorted = [...timeInDays].sort((a,b ) => (a-b));\r\n \r\n  const average = daysSorted.reduce((acc, cur) => acc + cur, 0) / daysSorted.length;\r\n  const minimum = daysSorted[0];\r\n  const maximum = daysSorted[daysSorted.length - 1];\r\n  const averageRounded = Math.round(average * 100) / 100;\r\n  return {\r\n    average: averageRounded,\r\n    minimum,\r\n    maximum,\r\n  }\r\n}\r\n\r\nconst COOKIE_CODE = \"document.cookie.split('; ').find((x) => x.startsWith('token=')).split('=')[1]\";\r\n\r\nexport function Home() {\r\n\r\n  const [token, setToken] = useState('');\r\n  const [orders, setOrders]: [ Order[], Function ] = useState([]);\r\n  const [orderDetails, setOrderDetails]: [ OrderDetail[], Function ] = useState([]);\r\n  const [orderDeliveryData, setOrderDeliveryData]: [OrderDeliveryDate[], Function] = useState([]);\r\n  const [stats, setStats]: [any, Function] = useState([]);\r\n\r\n  const fetchButtonClicked = () => {\r\n    console.log(token);\r\n\r\n    if (!token) return;\r\n\r\n    fetchAllOrders(token)\r\n    .then((orders) => {\r\n      console.log(orders);\r\n      setOrders(orders);\r\n    })\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n    fetchAllOrderDetail(token, orders)\r\n    .then((orderDetails) => {\r\n      console.log('details', orderDetails);\r\n      setOrderDetails(orderDetails);\r\n\r\n      const orderDeliveryData = prepareOrderDeliveryData(orderDetails);\r\n      setOrderDeliveryData(orderDeliveryData);\r\n      setStats(calculateStatistics(orderDeliveryData));\r\n    })\r\n  }, [orders]);\r\n\r\n  console.log('deliver', orderDetails);\r\n  console.log('deliver', orderDeliveryData);\r\n\r\n  return (\r\n    <div className=\"mx-32 pb-4\">\r\n      <div className=\"container text-center\">\r\n        <div className=\"text-4xl font-bold mt-2\">\r\n          View your order history\r\n        </div>\r\n\r\n        <div className=\"bg-blue-100 bg-opacity-10 mt-5 p-4 ring-2 rounded text-left\">\r\n          <p className=\"font-bold\">How to use?</p>\r\n          <p>An access token is required to fetch your Evaly orders. The easiest way to get it is as follows</p>\r\n          <ol className=\"list-decimal list-inside\">\r\n            <li>Login at evaly.com.bd</li>\r\n            <li>Open console panel and paste the following, <pre className=\"bg-purple-100 inline-block py-2 px-4 rounded\">{COOKIE_CODE}</pre></li>\r\n            <li>Copy the output and paste in the below input box</li>\r\n          </ol>\r\n        </div>\r\n\r\n        <div className=\"mt-10\">\r\n          <input className=\"border-2 p-2 rounded w-2/4 border-blue-300\" placeholder=\"Paste token\" type=\"text\" value={token} onChange={e => setToken(e.target.value)}></input>\r\n          <button type=\"button\" className=\"border-2 ml-2 p-2 px-4 rounded bg-blue-200 border-blue-300 font-bold\" onClick={fetchButtonClicked}>Fetch</button>\r\n        </div>\r\n\r\n\r\n        <div className=\"border-2 border-blue-100 mt-10 rounded\">\r\n          <p className=\"font-bold text-lg bg-blue-100 py-1\"> Order Status </p>\r\n\r\n          <div className=\"py-4\">\r\n            <OrderStatusChart orders={orders}/>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"border-2 border-blue-100 mt-10 rounded\">\r\n          <p className=\"font-bold text-lg bg-blue-100 py-1\">Order Timeline</p>\r\n\r\n          <div className=\"py-4\">\r\n\r\n            {/* <PendingOrders orderDetails={orderDetails} /> */}\r\n\r\n            <OrderTimelineChart orderDeliveryDates={orderDeliveryData} />\r\n\r\n            <p className=\"bg-blue-50 font-semibold inline-block px-6 py-2 rounded-full text-left\">\r\n              You have total <span className=\"bg-blue-300 font-bold px-2 rounded-full\">{orders.length}</span> orders.\r\n                Out of these, <span className=\"bg-blue-300 font-bold px-2 rounded-full\">{orderDeliveryData.length}</span> has been delivered.\r\n            </p>\r\n\r\n            <div className=\"flex justify-evenly mt-5\">\r\n              <Badge header=\"Minimum\" content={stats.minimum} />\r\n              <Badge header=\"Average\" content={stats.average} />\r\n              <Badge header=\"Maximum\" content={stats.maximum} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import './App.css';\nimport { Home } from './components/Home';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}